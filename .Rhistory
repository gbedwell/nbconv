call. = FALSE)
}
}
if (missing(mus)){
if (!missing(ps)){
mus <- phis*(1 - ps)/ps
}
else{
stop("One of 'mus' or 'ps' must be specified.",
call. = FALSE)
}
}
if (length(mus) != length(phis)){
stop("'mus' and 'phis' must have the same length.", call. = FALSE)
}
saddlepoint_calc <- function(mus, phis, counts.start, counts.end){
K  <-  function(s) { sum(phis*(log(phis) - log(phis + mus*(1 - exp(s))))) }
Kd <-  function(s) { logSumExp(log(phis) + log(mus) + s - log(phis + mus - mus * exp(s))) }
Kdd <- function(s) { logSumExp(log(phis) + log(mus) + log(phis + mus) + s - 2 * log(phis + mus - mus * exp(s))) }
pmf_eq <- function(s, x) { -0.5 * (log(2 * pi) + Kdd(s)) + K(s) - s * x }
if (counts.start == 0){
x.start <- 1
pmf0 <- prod(pnbinom(0, size = phis, mu = mus))
}
else{
x.start <- counts.start
}
v <- x.start:counts.end
pmf <- sapply(X = v,
FUN = function(x) {
# suppressWarnings() used here to suppress "NaNs produced" warning.
# warnings() returns 'In log(phis + mus - mus * exp(s)) : NaNs produced'
# uniroot is trying to take the log of a negative number when mus * exp(s) > phis + mus
# this warning doesn't appear to affect uniroot's output
s <- suppressWarnings(uniroot(function(s) Kd(s) - log(x),
lower = -1e2,
upper = 0,
extendInt = "yes",
tol = .Machine$double.eps)$root)
pmf <- pmf_eq(s, x)
return(pmf)
}
)
if (exists("pmf0")){
pmf <- c(pmf0, exp(pmf))
}
else{
pmf <- exp(pmf)
}
return(pmf)
}
if (n.cores == 1){
saddlepoint.pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = counts.start,
counts.end = counts.end)
}
else{
v <- counts.start:counts.end
v.list <- split(v, ceiling((seq_along(v))/1000))
pmf.list <- mclapply(X = v.list,
FUN = function(y) {
split.start <- min(y)
split.end <- max(y)
pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = split.start,
counts.end = split.end)
return(pmf) },
mc.cores = n.cores)
saddlepoint.pmf <- Reduce(c, pmf.list)
}
#
#   left <- max(pmf)/pmf[1]
#   right <- max(pmf)/pmf[length(pmf)]
#
#   if ((left < 1e4 && counts.start != 0) || right < 1e4){
#     near.zero <- FALSE
#   }
#   else{
#     near.zero <- TRUE
#   }
#
#   if (isFALSE(near.zero)){
#     warning("The density values at one or both of the ends of the given range are > 1e-5. Consider increasing the evaluated range.",
#             call. = FALSE)
#   }
#
#   if (isTRUE(normalize)){
#     if (isTRUE(near.zero)){
#       saddlepoint.pmf <- saddlepoint.pmf/sum(saddlepoint.pmf)
#     }
#     else{
#       stop("The ends of the distribution are too far from zero to normalize. Increase the evaluated range to normalize.",
#            call. = FALSE)
#     }
#   }
return(saddlepoint.pmf)
}
sum(mus)
nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000)
library(matrixStats)
nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000)
system.time(
nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000,
n.cores = 8)
)
system.time(
saddle.sum <- nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000,
n.cores = 1)
)
system.time(
saddle.sum2 <- nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000,
n.cores = 8)
)
all.equal(target = saddle.sum,
current = saddle.sum2,
tolerance = 1e-16)
rm(test)
#'@param ps Vector of individual probabilities.
#'@param counts.start The smallest number of counts at which the PMF is to be evaluated. Defaults to 0.
#'@param counts.end The largest number of counts at which the PMF is to be evaluated.
#'@param normalize Boolean. If TRUE, the PMF is re-normalized to sum to 1.
#'
#'@import matrixStats
#'@import parallel
#'
#'@export
#'
nb_sum_saddlepoint <- function(mus, phis, ps, counts.start = 0, counts.end, normalize = TRUE, n.cores = 1){
if (!missing(mus)){
if (!missing(ps)){
stop("'mus' and 'ps' both specified",
call. = FALSE)
}
}
if (missing(mus)){
if (!missing(ps)){
mus <- phis*(1 - ps)/ps
}
else{
stop("One of 'mus' or 'ps' must be specified.",
call. = FALSE)
}
}
if (length(mus) != length(phis)){
stop("'mus' and 'phis' must have the same length.", call. = FALSE)
}
saddlepoint_calc <- function(mus, phis, counts.start, counts.end){
K  <-  function(s) { sum(phis*(log(phis) - log(phis + mus*(1 - exp(s))))) }
Kd <-  function(s) { logSumExp(log(phis) + log(mus) + s - log(phis + mus - mus * exp(s))) }
Kdd <- function(s) { logSumExp(log(phis) + log(mus) + log(phis + mus) + s - 2 * log(phis + mus - mus * exp(s))) }
pmf_eq <- function(s, x) { -0.5 * (log(2 * pi) + Kdd(s)) + K(s) - s * x }
if (counts.start == 0){
x.start <- 1
pmf0 <- prod(pnbinom(0, size = phis, mu = mus))
}
else{
x.start <- counts.start
}
v <- x.start:counts.end
pmf <- sapply(X = v,
FUN = function(x) {
# suppressWarnings() used here to suppress "NaNs produced" warning.
# warnings() returns 'In log(phis + mus - mus * exp(s)) : NaNs produced'
# uniroot is trying to take the log of a negative number when mus * exp(s) > phis + mus
# this warning doesn't appear to affect uniroot's output
s <- suppressWarnings(uniroot(function(s) Kd(s) - log(x),
lower = -1e2,
upper = 0,
extendInt = "yes",
tol = .Machine$double.eps)$root)
pmf <- pmf_eq(s, x)
return(pmf)
}
)
if (exists("pmf0")){
pmf <- c(pmf0, exp(pmf))
}
else{
pmf <- exp(pmf)
}
return(pmf)
}
if (n.cores == 1){
saddlepoint.pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = counts.start,
counts.end = counts.end)
}
else{
v <- counts.start:counts.end
v.list <- split(v, ceiling((seq_along(v))/1000))
pmf.list <- mclapply(X = v.list,
FUN = function(y) {
split.start <- min(y)
split.end <- max(y)
pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = split.start,
counts.end = split.end)
return(pmf) },
mc.cores = n.cores)
saddlepoint.pmf <- Reduce(c, pmf.list)
}
left <- max(pmf)/pmf[1]
right <- max(pmf)/pmf[length(pmf)]
if ((left < 1e4 && counts.start != 0) || right < 1e4){
near.zero <- FALSE
}
else{
near.zero <- TRUE
}
if (isFALSE(near.zero)){
warning("The density values at one or both of the ends of the given range are > 1e-5. Consider increasing the evaluated range.",
call. = FALSE)
}
if (isTRUE(normalize)){
if (isTRUE(near.zero)){
saddlepoint.pmf <- saddlepoint.pmf/sum(saddlepoint.pmf)
}
else{
stop("The ends of the distribution are too far from zero to normalize. Increase the evaluated range to normalize.",
call. = FALSE)
}
}
return(saddlepoint.pmf)
}
system.time(
saddle.sum <- nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000,
n.cores = 1,
normalize = FALSE)
)
#'@param ps Vector of individual probabilities.
#'@param counts.start The smallest number of counts at which the PMF is to be evaluated. Defaults to 0.
#'@param counts.end The largest number of counts at which the PMF is to be evaluated.
#'@param normalize Boolean. If TRUE, the PMF is re-normalized to sum to 1.
#'
#'@import matrixStats
#'@import parallel
#'
#'@export
#'
nb_sum_saddlepoint <- function(mus, phis, ps, counts.start = 0, counts.end, normalize = TRUE, n.cores = 1){
if (!missing(mus)){
if (!missing(ps)){
stop("'mus' and 'ps' both specified",
call. = FALSE)
}
}
if (missing(mus)){
if (!missing(ps)){
mus <- phis*(1 - ps)/ps
}
else{
stop("One of 'mus' or 'ps' must be specified.",
call. = FALSE)
}
}
if (length(mus) != length(phis)){
stop("'mus' and 'phis' must have the same length.", call. = FALSE)
}
saddlepoint_calc <- function(mus, phis, counts.start, counts.end){
K  <-  function(s) { sum(phis*(log(phis) - log(phis + mus*(1 - exp(s))))) }
Kd <-  function(s) { logSumExp(log(phis) + log(mus) + s - log(phis + mus - mus * exp(s))) }
Kdd <- function(s) { logSumExp(log(phis) + log(mus) + log(phis + mus) + s - 2 * log(phis + mus - mus * exp(s))) }
pmf_eq <- function(s, x) { -0.5 * (log(2 * pi) + Kdd(s)) + K(s) - s * x }
if (counts.start == 0){
x.start <- 1
pmf0 <- prod(pnbinom(0, size = phis, mu = mus))
}
else{
x.start <- counts.start
}
v <- x.start:counts.end
pmf <- sapply(X = v,
FUN = function(x) {
# suppressWarnings() used here to suppress "NaNs produced" warning.
# warnings() returns 'In log(phis + mus - mus * exp(s)) : NaNs produced'
# uniroot is trying to take the log of a negative number when mus * exp(s) > phis + mus
# this warning doesn't appear to affect uniroot's output
s <- suppressWarnings(uniroot(function(s) Kd(s) - log(x),
lower = -1e2,
upper = 0,
extendInt = "yes",
tol = .Machine$double.eps)$root)
pmf <- pmf_eq(s, x)
return(pmf)
}
)
if (exists("pmf0")){
pmf <- c(pmf0, exp(pmf))
}
else{
pmf <- exp(pmf)
}
return(pmf)
}
if (n.cores == 1){
saddlepoint.pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = counts.start,
counts.end = counts.end)
}
else{
v <- counts.start:counts.end
v.list <- split(v, ceiling((seq_along(v))/1000))
pmf.list <- mclapply(X = v.list,
FUN = function(y) {
split.start <- min(y)
split.end <- max(y)
pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = split.start,
counts.end = split.end)
return(pmf) },
mc.cores = n.cores)
saddlepoint.pmf <- Reduce(c, pmf.list)
}
left <- max(saddlepoint.pmf)/saddlepoint.pmf[1]
right <- max(saddlepoint.pmf)/saddlepoint.pmf[length(saddlepoint.pmf)]
if ((left < 1e4 && counts.start != 0) || right < 1e4){
near.zero <- FALSE
}
else{
near.zero <- TRUE
}
if (isFALSE(near.zero)){
warning("The density values at one or both of the ends of the given range are > 1e-5. Consider increasing the evaluated range.",
call. = FALSE)
}
if (isTRUE(normalize)){
if (isTRUE(near.zero)){
saddlepoint.pmf <- saddlepoint.pmf/sum(saddlepoint.pmf)
}
else{
stop("The ends of the distribution are too far from zero to normalize. Increase the evaluated range to normalize.",
call. = FALSE)
}
}
return(saddlepoint.pmf)
}
system.time(
saddle.sum <- nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000,
n.cores = 1,
normalize = FALSE)
)
system.time(
saddle.sum2 <- nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 20000,
n.cores = 8,
normalize = FALSE)
)
all.equal(target = saddle.sum,
current = saddle.sum2,
tolerance = 1e-16)
sum(saddle.sum)
#'@param ps Vector of individual probabilities.
#'@param counts.start The smallest number of counts at which the PMF is to be evaluated. Defaults to 0.
#'@param counts.end The largest number of counts at which the PMF is to be evaluated.
#'@param normalize Boolean. If TRUE, the PMF is re-normalized to sum to 1.
#'
#'@import matrixStats
#'@import parallel
#'
#'@export
#'
nb_sum_saddlepoint <- function(mus, phis, ps, counts.start = 0, counts.end, normalize = TRUE, n.cores = 1){
if (!missing(mus)){
if (!missing(ps)){
stop("'mus' and 'ps' both specified",
call. = FALSE)
}
}
if (missing(mus)){
if (!missing(ps)){
mus <- phis*(1 - ps)/ps
}
else{
stop("One of 'mus' or 'ps' must be specified.",
call. = FALSE)
}
}
if (length(mus) != length(phis)){
stop("'mus' and 'phis' must have the same length.", call. = FALSE)
}
saddlepoint_calc <- function(mus, phis, counts.start, counts.end){
K  <-  function(s) { sum(phis*(log(phis) - log(phis + mus*(1 - exp(s))))) }
Kd <-  function(s) { logSumExp(log(phis) + log(mus) + s - log(phis + mus - mus * exp(s))) }
Kdd <- function(s) { logSumExp(log(phis) + log(mus) + log(phis + mus) + s - 2 * log(phis + mus - mus * exp(s))) }
pmf_eq <- function(s, x) { -0.5 * (log(2 * pi) + Kdd(s)) + K(s) - s * x }
if (counts.start == 0){
x.start <- 1
pmf0 <- prod(pnbinom(0, size = phis, mu = mus))
}
else{
x.start <- counts.start
}
v <- x.start:counts.end
pmf <- sapply(X = v,
FUN = function(x) {
# suppressWarnings() used here to suppress "NaNs produced" warning.
# warnings() returns 'In log(phis + mus - mus * exp(s)) : NaNs produced'
# uniroot is trying to take the log of a negative number when mus * exp(s) > phis + mus
# this warning doesn't appear to affect uniroot's output
s <- suppressWarnings(uniroot(function(s) Kd(s) - log(x),
lower = -1e2,
upper = 0,
extendInt = "yes",
tol = .Machine$double.eps)$root)
pmf <- pmf_eq(s, x)
return(pmf)
}
)
if (exists("pmf0")){
pmf <- c(pmf0, exp(pmf))
}
else{
pmf <- exp(pmf)
}
return(pmf)
}
if (n.cores == 1){
saddlepoint.pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = counts.start,
counts.end = counts.end)
}
else{
v <- counts.start:counts.end
v.list <- split(v, ceiling((seq_along(v))/1000))
pmf.list <- mclapply(X = v.list,
FUN = function(y) {
split.start <- min(y)
split.end <- max(y)
pmf <- saddlepoint_calc(mus = mus,
phis = phis,
counts.start = split.start,
counts.end = split.end)
return(pmf) },
mc.cores = n.cores)
saddlepoint.pmf <- Reduce(c, pmf.list)
}
left <- max(saddlepoint.pmf)/saddlepoint.pmf[1]
right <- max(saddlepoint.pmf)/saddlepoint.pmf[length(saddlepoint.pmf)]
if ((left < 1e5 & counts.start != 0) || right < 1e5){
near.zero <- FALSE
}
else{
near.zero <- TRUE
}
if (isFALSE(near.zero)){
warning("The density values at one or both of the ends of the given range are far from zero. Consider increasing the evaluated range.",
call. = FALSE)
}
if (isTRUE(normalize)){
if (isTRUE(near.zero)){
saddlepoint.pmf <- saddlepoint.pmf/sum(saddlepoint.pmf)
}
else{
stop("The ends of the distribution are too far from zero to normalize. Increase the evaluated range.",
call. = FALSE)
}
}
return(saddlepoint.pmf)
}
system.time(
saddle.sum2 <- nb_sum_saddlepoint(mus = mus,
phis = phis1,
counts.start = 0,
counts.end = 5000,
n.cores = 8,
normalize = FALSE)
)
sum(saddle.sum2)
devtools::document()
devtools::install()
devtools::document()
devtools::install()
exp(-9)
exp(-10)/exp(-18)
exp(-9)/exp(-18)
5000/1e4
1e-6/5000
1e-6/5e3
devtools::document()
devtools::install()
devtools::document()
devtools::install()
